start: start

productions:
  start:
    - [judgements, nl]
  judgements:
    - [judgements, nl, judgement]
    - [judgement]
  judgement:
    - [
        facts, maybe_comment, nl,
        judgement_line, nl,
        fact, maybe_comment,
      ]
    - [judgement_line, nl, fact, maybe_comment]
  judgement_line:
    - [line]
    - [line, _, _, ";", _, not_a_newline]
  facts:
    - [facts, __, fact]
    - [fact]
  fact:
    - ["↑", "(", inc_or_dec, comma, var_or_label, comma, nat, comma, expr0, ")", _, "=", _, expr0]  # term/expression shift
    - ["↑", "(", inc_or_dec, comma, var_or_label, comma, nat, comma, context, ")", _, "=", _, context]  # context shift
    - [expr0, "[", var, "@", nat, _, "≔", _, expr0, "]", _,  "=", _, expr0]
    - [expr0, "[", var, _, "≔", _, expr0, "]", _,  "=", _, expr0]
    - [expr0, _, "↦", _, expr0]
    - [expr0, _, "⇥", _, expr0]
    - [expr0, _, "≡", _, expr0]
    - [encode, "(", expr0, ")", _, "=", _, cbor0]
    - [decode, "(", cbor0, ")", _, "=", _, expr0]
    - [keys, "(", expr0, ")", _, "=", _, var*]
    - [sort, "(", var*, ")", _, "=", _, var*]
    - [expr0, _, "↝", _, expr0, _, ":", _, expr0]
    - [context, _, "⊢", _, expr0, _, ":", "⇥", _, expr0]
    - [context, _, "⊢", _, expr0, _, ":", _, expr0]
    - [expr0, _, ":", "⇥", _, expr0]
    - [expr0, _, "⋁", _, expr0, _, "=", _, expr0]
  context:
    - [ε]
    - [context_var]
    - [context_var, ",", _, var, _, ":", _, var]
    - ["(", context, ")"]

  expr0:
    - [expr0, _, "→", _, expr1]
    - [expr1]
  expr1:
    - [let, _, var_or_label, _,                 "=", _, var, _,                  in, _, var]
    - [let, _, var_or_label, _, ":", _, var, _, "=", _, var, _,                  in, _, var]
    - [let, _,                                                          var*, _, in, _, var]
    - [let, _, var_or_label, _,                 "=", _, var, _, let, _, var*, _, in, _, var]
    - [let, _, var_or_label, _, ":", _, var, _, "=", _, var, _, let, _, var*, _, in, _, var]

    - [if, _, var, _, then, _, var, _, else, _, var]

    - ["λ", "(", var_or_label, _, ":", _, expr0, ")", _, "→", _, expr1]
    - ["∀", "(", var_or_label, _, ":", _, expr0, ")", _, "→", _, expr1]

    - ["[", "]", _, ":", _, expr1]
    #- ["[", "]", _, ":", _, "Optional", _, expr1]
    #- ["[", _, var, _, "]", _, ":", _, "Optional", _, var]

    - [expr2, _, binop0, _, expr2]
    - [expr2]
  expr2:
    - [expr3, _, binop1, _, expr3]
    - [expr2, _, expr3]  # application
    - [merge, _, expr3, _, expr3, _, ":", _, var]
    - [merge, _, expr3, _, expr3]
    - [toMap, _, expr3, _, ":", _, expr3]
    - [toMap, _, expr3]
    - [assert, _, ":", _, expr3]
    - [expr3, _, ":", _, expr3]
    - [expr3]
  expr3:
    - ["(", expr0, ")"]
    - [var]
    - ['"', x, '"']  # var converted to string - special case for toMap

    - [var_or_label, "@", nat]
    - [quoted_label]

    - ["0"]
    - ["1"]

    - ["[", _, expr0, _, "]"]
    - ["[", _, var*, _, "]"]
    - ["[", _, var, ",", _, var*, _, "]"]

    - [expr3, _, binop2, _, var]

    - [expr3, ".", var]
    - [expr3, ".", "(", expr0, ")"]
    - [var, ".", "{", "}"]
    - [expr3, ".", "{", _, var, _, "}"]
    - [expr3, ".", "{", _, var*, _, "}"]
    - [expr3, ".", "{", _, var, ",", _, var*, _, "}"]

    - [var_nat, ".", var_nat]  # double literal
    - ['"', var_nat, ".", var_nat, '"']  # conversion double -> text
    - [var_nat]  # natural literal
    - ["+", var_nat]  # conversion natural -> integer
    - ['"', var_nat, '"']  # conversion natural -> text
    - ["±", var_nat]  # integer literal
    - ["±", var_nat, ".", "0"]  # conversion int -> double
    - ['"', "±", var_nat, '"']  # conversion int -> text

    - ['"', '"']
    - ['"', var_string, '"']  # string literal
    - ['"', var_string, var_string, '"']
    - ['"', var_string*, '"']  # string literal with induction
    - ['"', var_string, var_string, var_string*, '"']
    - ['"', "$", "{", var, "}", var_string*, '"']  # string interpolation
    - ['"', var_string, "$", "{", var, "}", var_string*, '"']  # string interpolation
    - ['"', var_string, var_string, "$", "{", var, "}", var_string*, var_string*, '"']  # string interpolation
    - ['"', "$", "{", var, "}", "$", "{", var, "}", '"']  # string double interpolation

    - ["{", _, var*, _, "}"]  # record type or value
    - ["{", "}"]  # empty record type
    - ["{", _, record_type_fields, _, "}"]
    - ["{", _, record_type_fields, ",", _, var*, _, "}"]
    - ["{", "=", "}"]  # empty record value
    - ["{", _, record_value_fields, _, "}"]
    - ["{", _, record_value_fields, ",", _, var*, _, "}"]

    - ["<", ">"]
    - ["<", _, var*, _, ">"]
    - ["<", _, var, _, ":", _, var, _, ">"]
    - ["<", _, var, _, ":", _, var, _, "|", _, var*, _, ">"]
    - ["<", _, var, _, "|", _, var*, _, ">"]
    - ["<", _, var, _, "=", _, var, _, ">"]
    - ["<", _, var, _, "=", _, var, _, "|", _, var*, _, ">"]
    - ["<", _, var, _, "=", _, var, _, "|", _, var, _, ":", _, var, _, "|", _, var*, _, ">"]

    - [Some, _, var]
    - [None]
    - [Natural, /, natural_builtin]
    - [Integer, /, toDouble]
    - [Integer, /, show]
    - [Double, /, show]
    - [List, /, list_builtin]
    - [Optional, /, fold]
    - [Optional, /, build]
    - [Text, /, show]
    - [Bool]
    - [Optional]
    - [Natural]
    - [List]
    - [Integer]
    - [Double]
    - [Text]
    - ["True"]
    - ["False"]
    - [Type]
    - [Kind]
    - [Sort]

    # imports
    - [missing]
    - [var, _, file]
    - [., _, path, _, file]
    - [".", ".", _, path, _, file]
    - ["~", _, path, _, file]
    - [http_or_https, var, _, var, _, file]  # http(s)://authority path file
    - [http_or_https, var, _, var, _, file, _, using, _, var]  # https://authority path file using headers
    - ["env:x"]

  natural_builtin:
    - [build]
    - [fold]
    - [isZero]
    - [even]
    - [odd]
    - [toInteger]
    - [show]
    - [subtract]
  list_builtin:
    - [build]
    - [fold]
    - [length]
    - [head]
    - [last]
    - [indexed]
    - [reverse]
  binop0:
    - ["#"]
  binop1:
    - ["+"]
    - ["-"]
    - ["*"]
    - ["∧"]
    - ["⫽"]
    - ["⩓"]
  binop2:
    - ["||"]
    - ["++"]
    - ["&&"]
    - ["=="]
    - ["!="]
    - ["==="]
    - ["?"]

  record_type_fields:
    - [var_or_label, _, ":", _, expr0]
    - [record_type_fields, ",", _, var_or_label, _, ":", _, expr0]

  record_value_fields:
    - [var_or_label, _, "=", _, expr0]
    - [record_value_fields, ",", _, var_or_label, _, "=", _, expr0]

  ### whitespaces of many kind ###
  _:  # weak whitespace
    - [space]
  __:  # strong whitespace
    - [space, space, space]
    - [maybe_comment, nl]
  maybe_comment:
    - []
    - [space*, ";", _, not_a_newline]
  space*:
    - []
    - [space*, space]

  comma:
    - [",", _]

  inc_or_dec:
    - ["1"]
    - ["-", "1"]
    - ["d"]
  nat:
    - ["0"]
    - [var_nat]
    - ["1", _, "+", _, nat]
    - [nat, _, "+", _, "1"]
    - ["(", nat, ")"]

  cbor0:
    - [var]
    - [n]
    - [n, n]
    - [-, n]
    - [-, n, n]
    - [n.n_h]
    - [n.n_h, "(", hex16, ")"]
    - [n.n_s]
    - [n.n]
    - ["[", _, cbor0_list, cbor0, _, "]"]
    - ["[", _, cbor0_list, var*, _, "]"]
    - ['"', cbor_string_literal_content, '"']
    - [cbor_int_literal]
    - ["False"]
    - ["True"]
    - ["null"]
    - [CBORTag, _, cbor_int_literal, _, cbor0]
  cbor0_list:
    - []
    - [cbor0, ",", _, cbor0_list]

  var:
    - [value_var]
    - [type_letter_with_maybe_index]
    - [discard_var]
    - [long_var]
  value_var:
    - [var_letter_with_maybe_index]
    # special vars
    - [succ]
    - [natural]
    - [zero]
    - [list]
    - [cons]
    - [nil]
    - [optional]
    - [just]
    - [nothing]
  var*:
    - ["…"]
    - [var_letter_with_maybe_index, "…"]
    - [var*, _, "\\", _, var*]  # set difference
    - [var*, _, "∩", _, var*]  # set intersection

  var_string:
    - [_var_string]
  var_string*:
    - [s, _var_string, "…"]

  var_or_label:
    - [var]
    - [quoted_label]

terminals:
  space: [string, " "]
  nl: [string, "\n"]
  not_a_newline: [regexp, "[^\n]+"]
  var_letter_with_maybe_index: [regexp, "[abcefghiklorstuvxy]s?[₀-₉]*"]
  type_letter_with_maybe_index: [regexp, "[ABTLRU][₀-₉]*"]
  discard_var: [string, _]
  _var_string: [regexp, "s[₀-₉]*"]
  context_var: [regexp, "Γ[₀-₉]*"]
  field: [regexp, "[a-z]+"]
  line: [regexp, "[─]+"]
  var_nat: [regexp, "m|n"]
  quoted_label: [regexp, "`[a-zA-Z_]+`"]
  cbor_string_literal_content: [regexp, "[a-zA-Z_\/]+"]
  cbor_int_literal: [regexp, "[0-9]+"]
  hex16: [regexp, "0x[a-fA-F0-9]{4}"]
  long_var: [regexp, "(path|authority|directory|headers|import)[₀-₉]*"]
  http_or_https: [regexp, "https?:\/\/"]

string_terminals:
  - "!="
  - "#"
  - "&&"
  - "("
  - ")"
  - "*"
  - "+"
  - "++"
  - ","
  - "."
  - "/"
  - ":"
  - ";"
  - "<"
  - "="
  - "=="
  - ">"
  - "?"
  - "@"
  - "["
  - "]"
  - "{"
  - "|"
  - "||"
  - "}"
  - "~"
  - "±"
  - "…"
  - "↑"
  - "→"
  - "↝"
  - "↦"
  - "⇥"
  - "∀"
  - "∧"
  - "≔"
  - "≡"
  - "⊢"
  - "⩓"
  - "⫽"
  - '"'
  - "$"
  - "0"
  - "Bool"
  - "build"
  - "cons"
  - "Double"
  - "else"
  - "encode"
  - "env:x"
  - "even"
  - "False"
  - "file"
  - "fold"
  - "head"
  - "if"
  - "in"
  - "indexed"
  - "Integer"
  - "isZero"
  - "just"
  - "Kind"
  - "last"
  - "length"
  - "let"
  - "list"
  - "List"
  - "merge"
  - "natural"
  - "Natural"
  - "nil"
  - "None"
  - "nothing"
  - "odd"
  - "optional"
  - "Optional"
  - "path"
  - "reverse"
  - "s"
  - "show"
  - "Some"
  - "Sort"
  - "succ"
  - "Text"
  - "then"
  - "toDouble"
  - "toInteger"
  - "True"
  - "Type"
  - "zero"
  - "ε"
  - "λ"
  - "1"
  - "-"
  - "d"
  - "toMap"
  - "==="
  - "assert"
  - "subtract"
  - "keys"
  - "\\"
  - "∩"
  - "sort"
  - "x"
  - "⋁"
  - "n"
  - "null"
  - "n.n_s"
  - "n.n_h"
  - "n.n"
  - "using"
  - "missing"
  - "decode"
  - "CBORTag"
