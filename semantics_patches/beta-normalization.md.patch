--- dhall-lang/standard/beta-normalization.md	2020-04-05 15:25:43.717586781 +0200
+++ build/semantics_raw/beta-normalization.md	2020-04-05 18:13:22.857624351 +0200
@@ -656,9 +656,9 @@
 Or in other words:
 
 
-    f ⇥ Text/show   a ⇥ "…\n…\$…\\…\"…\u0000…"
-    ─────────────────────────────────────────── ; "…\n…\$…\\…\"…\u0000…" contains no interpolations
-    f a ⇥ "\"…\\n…\\u0024…\\\\…\\\"…\\u0000…\""
+;    f ⇥ Text/show   a ⇥ "…\n…\$…\\…\"…\u0000…"
+;    ─────────────────────────────────────────── ; "…\n…\$…\\…\"…\u0000…" contains no interpolations
+;    f a ⇥ "\"…\\n…\\u0024…\\\\…\\\"…\\u0000…\""
 
 
 Otherwise, in isolation `Text/show` is in normal form:
@@ -728,8 +728,8 @@
     ls₀ ⇥ [ ls₁… ]
     rs₀ ⇥ [ rs₁… ]
     [ ls₁… ] # [ rs₁… ] ⇥ t
-    ───────────────────────   ;  "[ ls₁… ] # [ rs₁… ]" means "use machine
-    ls₀ # rs₀ ⇥ t             ;  concatenation"
+    ───────────────────────  ;  "[ ls₁… ] # [ rs₁… ]" means "use machine
+    ls₀ # rs₀ ⇥ t            ;  concatenation"
 
 
 Also, simplify the "list concatenation" operator if either argument normalizes
@@ -750,7 +750,7 @@
 
 
     ls₀ ⇥ ls₁   rs₀ ⇥ rs₁
-    ─────────────────────   ; If no other rule matches
+    ─────────────────────  ; If no other rule matches
     ls₀ # rs₀ ⇥ ls₁ # rs₁
 
 
@@ -788,9 +788,9 @@
     f as ⇥ None A₀
 
 
-    f ⇥ List/last A₀   as ⇥ [ …, a ]
-    ────────────────────────────────
-    f as ⇥ Some a
+;    f ⇥ List/last A₀   as ⇥ [ …, a ]
+;    ────────────────────────────────
+;    f as ⇥ Some a
 
 
 `List/indexed` tags each element of the list with the element's index:
@@ -798,12 +798,12 @@
 
     f ⇥ List/indexed A₀   as ⇥ [] : A₁
     ───────────────────────────────────────────────
-    f as ⇥ [] : List { index : Natural, value : A₀ }
+    f as ⇥ [] : List { `index` : Natural, `value` : A₀ }
 
 
-    f ⇥ List/indexed A₀   as ⇥ [ a₀, a₁, …, ]
-    ──────────────────────────────────────────────────────────────────
-    f as ⇥ [ { index = 0, value = a₀ }, { index = 1, value = a₁ }, … ]
+;    f ⇥ List/indexed A₀   as ⇥ [ a₀, a₁, …, ]
+;    ──────────────────────────────────────────────────────────────────
+;    f as ⇥ [ { index = 0, value = a₀ }, { index = 1, value = a₁ }, … ]
 
 
 `List/reverse` reverses the elements of the list:
@@ -814,9 +814,9 @@
     f as ⇥ [] : A₁
 
 
-    f ⇥ List/reverse A₀   as ⇥ [ a₀, a₁, … ]
-    ────────────────────────────────────────
-    f as ⇥ [ …, a₁, a₀ ]
+;    f ⇥ List/reverse A₀   as ⇥ [ a₀, a₁, … ]
+;    ────────────────────────────────────────
+;    f as ⇥ [ …, a₁, a₀ ]
 
 
 All of the built-in functions on `List`s are in normal form:
@@ -957,7 +957,7 @@
 
 
     t₀ ⇥ { xs… } ⫽ t₁   t₁.x ⇥ v
-    ──────────────────────────── ; x ∉ xs
+    ────────────────────────────  ; x ∉ xs
     t₀.x ⇥ v
 
 
@@ -967,7 +967,7 @@
 
 
     t₀ ⇥ t₁ ⫽ { xs… }   t₁.x ⇥ v
-    ──────────────────────────── ; x ∉ xs
+    ────────────────────────────  ; x ∉ xs
     t₀.x ⇥ v
 
 
@@ -981,7 +981,7 @@
 
 
     t₀ ⇥ { xs… } ∧ t₁   t₁.x ⇥ v
-    ──────────────────────────── ; x ∉ xs
+    ────────────────────────────  ; x ∉ xs
     t₀.x ⇥ v
 
 
@@ -991,7 +991,7 @@
 
 
     t₀ ⇥ t₁ ∧ { xs… }   t₁.x ⇥ v
-    ──────────────────────────── ; x ∉ xs
+    ────────────────────────────  ; x ∉ xs
     t₀.x ⇥ v
 
 
@@ -1031,9 +1031,9 @@
 
 
     t₀ ⇥ l ⫽ { rs… }
-    keys(rs…) = ks…
+    keys({ rs… }) = ks…
     l.{ xs… \ ks… } ⫽ { rs… }.{ xs… ∩ ks… } ⇥ t₁
-    ──────────────────────────────────────────── ; "\" means set difference, "∩" means set intersection
+    ────────────────────────────────────────────  ; "\" means set difference, "∩" means set intersection
     t₀.{ xs… } ⇥ t₁
 
 
@@ -1049,9 +1049,9 @@
 
 
     s ⇥ { ss… }
-    keys(s) = s₁
-    t.{s₁} ⇥ ts₁
-    ────────────
+    keys(s) = ss₁…
+    t.{ ss₁… } ⇥ ts₁
+    ────────────────
     t.(s) ⇥ ts₁
 
 
@@ -1090,7 +1090,7 @@
 
 
     l₀ ⇥ l₁   r₀ ⇥ r₁
-    ─────────────────   ; If no other rule matches
+    ─────────────────  ; If no other rule matches
     l₀ ∧ r₀ ⇥ l₁ ∧ r₁
 
 
@@ -1130,7 +1130,7 @@
 
 
     l₀ ⇥ l₁   r₀ ⇥ r₁
-    ─────────────────   ; If no other rule matches
+    ─────────────────  ; If no other rule matches
     l₀ ⫽ r₀ ⇥ l₁ ⫽ r₁
 
 
@@ -1166,7 +1166,7 @@
 
 
     l₀ ⇥ l₁   r₀ ⇥ r₁
-    ─────────────────   ; If no other rule matches
+    ─────────────────  ; If no other rule matches
     l₀ ⩓ r₀ ⇥ l₁ ⩓ r₁
 
 
@@ -1174,17 +1174,17 @@
 item represents a field. The value "x" below represents the text value of the field name `x`.
 
 
-    t ⇥ { x = v, ts… }   toMap { ts } ⇥ m
-    ──────────────────────────────────────────────
-    toMap t ⇥ [ {mapKey = "x", mapValue = v} ] # m
+    t ⇥ { x = v, ts… }   toMap { ts… } ⇥ m
+    ──────────────────────────────────────────────────
+    toMap t ⇥ [ { `mapKey` = "x", `mapValue` = v } ] # m
 
 
 The `toMap` application can be annotated with a type, and it must be if the record is empty.
 
 
-    t ⇥ { x = v, ts… }   toMap { ts } ⇥ m
-    ───────────────────────────────────────────────────
-    toMap t : T₀ ⇥ [ {mapKey = "x", mapValue = v} ] # m
+    t ⇥ { x = v, ts… }   toMap { ts… } ⇥ m
+    ───────────────────────────────────────────────────────
+    toMap t : T₀ ⇥ [ { `mapKey` = "x", `mapValue` = v } ] # m
 
 
     t ⇥ {=}   T₀ ⇥ T₁
@@ -1209,8 +1209,8 @@
 accordingly and continue to normalize:
 
 
-    ((T.default ⫽ r) : T.Type) ⇥ e
-    ──────────────────────────────
+    ((T.`default` ⫽ r) : T.`Type`) ⇥ e
+    ──────────────────────────────────
     T::r ⇥ e
 
 
@@ -1287,23 +1287,23 @@
 `< None | Some : A >`:
 
 
-    t ⇥ { Some = f, … }   o ⇥ Some a   f a ⇥ b
-    ──────────────────────────────────────────
+    t ⇥ { `Some` = f, … }   o ⇥ Some a   f a ⇥ b
+    ────────────────────────────────────────────
     merge t o : T ⇥ b
 
 
-    t ⇥ { Some = f, … }   o ⇥ Some a   f a ⇥ b
-    ──────────────────────────────────────────
+    t ⇥ { `Some` = f, … }   o ⇥ Some a   f a ⇥ b
+    ────────────────────────────────────────────
     merge t o ⇥ b
 
 
-    t ⇥ { None = v, … }   o ⇥ None A
-    ────────────────────────────────
+    t ⇥ { `None` = v, … }   o ⇥ None A
+    ──────────────────────────────────
     merge t o : T ⇥ v
 
 
-    t ⇥ { None = v, … }   o ⇥ None A
-    ────────────────────────────────
+    t ⇥ { `None` = v, … }   o ⇥ None A
+    ──────────────────────────────────
     merge t o ⇥ v
 
 
