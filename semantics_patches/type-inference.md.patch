--- dhall-lang/standard/type-inference.md	2020-04-05 15:25:43.717586781 +0200
+++ build/semantics_raw/type-inference.md	2020-04-05 18:13:58.927624486 +0200
@@ -298,13 +298,13 @@
 non-empty) or from the type annotation (if empty):
 
 
-    Γ ⊢ T₀ : c   T₀ ⇥ List T₁   T₁ : Type
-    ─────────────────────────────────────
+    Γ ⊢ T₀ : c   T₀ ⇥ List T₁   Γ ⊢ T₁ : Type
+    ─────────────────────────────────────────
     Γ ⊢ ([] : T₀) : List T₁
 
 
-    Γ ⊢ t : T₀   T₀ : Type   Γ ⊢ [ ts… ] : List T₁   T₀ ≡ T₁
-    ────────────────────────────────────────────────────────
+    Γ ⊢ t : T₀   Γ ⊢ T₀ : Type   Γ ⊢ [ ts… ] : List T₁   T₀ ≡ T₁
+    ────────────────────────────────────────────────────────────
     Γ ⊢ [ t, ts… ] : List T₀
 
 
@@ -353,8 +353,8 @@
     Γ ⊢ List/last : ∀(a : Type) → List a → Optional a
 
 
-    ─────────────────────────────────────────────────────────────────────────────
-    Γ ⊢ List/indexed : ∀(a : Type) → List a → List { index : Natural, value : a }
+    ─────────────────────────────────────────────────────────────────────────────────
+    Γ ⊢ List/indexed : ∀(a : Type) → List a → List { `index` : Natural, `value` : a }
 
 
     ────────────────────────────────────────────────
@@ -415,8 +415,8 @@
 A non-empty record can store terms, types and kinds:
 
 
-    Γ ⊢ T : t₀   Γ ⊢ { xs… } : t₁  t₀ ⋁ t₁ = t₂
-    ───────────────────────────────────────────  ; x ∉ { xs… }
+    Γ ⊢ T : t₀   Γ ⊢ { xs… } : t₁   t₀ ⋁ t₁ = t₂
+    ────────────────────────────────────────────  ; x ∉ { xs… }
     Γ ⊢ { x : T, xs… } : t₂
 
 
@@ -565,19 +565,19 @@
 
 
     Γ ⊢ e : { x : T, xs… }
-    Γ ⊢ ( toMap { xs… } : List { mapKey : Text, mapValue : T } ) : List { mapKey : Text, mapValue : T }
-    ───────────────────────────────────────────────────────────────────────────────────────────────────
-    Γ ⊢ toMap e : List { mapKey : Text, mapValue : T }
+    Γ ⊢ (toMap { xs… } : List { `mapKey` : Text, `mapValue` : T }) : List { `mapKey` : Text, `mapValue` : T }
+    ─────────────────────────────────────────────────────────────────────────────────────────────────────────
+    Γ ⊢ toMap e : List { `mapKey` : Text, `mapValue` : T }
 
 
-    Γ ⊢ e : {}   Γ ⊢ T₀ : Type   T₀ ⇥ List { mapKey : Text, mapValue : T₁ }
-    ───────────────────────────────────────────────────────────────────────
-    Γ ⊢ ( toMap e : T₀ ) : List { mapKey : Text, mapValue : T₁ }
+    Γ ⊢ e : {}   Γ ⊢ T₀ : Type   T₀ ⇥ List { `mapKey` : Text, `mapValue` : T₁ }
+    ───────────────────────────────────────────────────────────────────────────
+    Γ ⊢ (toMap e : T₀) : List { `mapKey` : Text, `mapValue` : T₁ }
 
 
     Γ ⊢ toMap e : T₀   T₀ ≡ T₁
     ──────────────────────────
-    Γ ⊢ ( toMap e : T₁ ) : T₀
+    Γ ⊢ (toMap e : T₁) : T₀
 
 
 You can complete a record literal using the record completion operator (`T::r`),
@@ -598,7 +598,7 @@
 desugared form:
 
 
-    Γ ⊢ ((T.default ⫽ r) : T.Type) : U
+    Γ ⊢ ((T.`default` ⫽ r) : T.`Type`) : U
     ──────────────────────────────────
     Γ ⊢ T::r : U
 
@@ -721,9 +721,9 @@
 
 `Optional`s can also be `merge`d as if they had type `< None | Some : A >`:
 
-    
+
     Γ₀ ⊢ o : Optional A
-    ↑(1, x, 0, (Γ₀, x : < None | Some : A >)) = Γ₁
+    ↑(1, x, 0, (Γ₀, x : < `None` | `Some` : A >)) = Γ₁
     Γ₁ ⊢ merge t x : T
     ──────────────────────────────────
     Γ ⊢ merge t o : T
