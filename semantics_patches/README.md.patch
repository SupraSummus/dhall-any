--- dhall-lang/standard/README.md	2019-10-14 17:04:42.957901045 +0200
+++ build/semantics_raw/README.md	2019-10-14 17:21:58.977909756 +0200
@@ -222,11 +222,11 @@
 non-empty list says that to normalize a list you normalize the head of the list
 and then normalize the tail:
 
-
-    t₀ ⇥ t₁   [ ts₀… ] ⇥ [ ts₁… ]
-    ─────────────────────────────
-    [ t₀, ts₀… ] ⇥ [ t₁, ts₁… ]
-
+```
+t₀ ⇥ t₁   [ ts₀… ] ⇥ [ ts₁… ]
+─────────────────────────────
+[ t₀, ts₀… ] ⇥ [ t₁, ts₁… ]
+```
 
 Note that this notation does not imply that implementations must use induction
 or inductive data structures (like linked lists) to implement lists, records, or
@@ -247,15 +247,15 @@
 More formally, we define
 
 
-    s ⇥ {}
-    ───────────
-    keys(s) = ε
+;    s ⇥ {}
+;    ───────────
+;    keys(s) = ε
 
 
-    s ⇥ { x : T, ss… }
-    keys(ss…) = ss₁…
-    ──────────────────
-    keys(s) = x, ss₁…
+;    s ⇥ { x : T, ss… }
+;    keys({ ss… }) = ss₁…
+;    ────────────────────
+;    keys(s) = x, ss₁…
 
 
 for record types and analogously for record literals.
